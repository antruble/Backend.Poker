@page "/poker"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Backend.Poker.Domain.Entities
@using Backend.Poker.Shared.Models.Poker
@using Frontend.WebAssembly.Poker.Services
@using Frontend.WebAssembly.Poker.Components.Layout

@rendermode InteractiveServer

@inject IHttpClientFactory HttpFactory
@inject GameStateService GameState
@inject NavigationManager NavigationManager
@* @layout SecondaryLayout *@

<h3 class="text-center my-4">Új póker játék indítása</h3>

<div class="card mx-auto w-100 h-100" style="max-width: 400px;">
    <div class="card-body">
        <EditForm Model="model"
                  OnValidSubmit="CreateGame"
                  FormName="newGameForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="playerName" class="form-label">Játékos neve:</label>
                <InputText id="playerName"
                           @bind-Value="model.PlayerName"
                           class="form-control" />
            </div>

            <div class="mb-3">
                <label for="numBots" class="form-label">Botok száma:</label>
                <InputNumber id="numBots"
                             @bind-Value="model.NumBots"
                             class="form-control"
                             min="1" />
            </div>

            <button type="submit"
                    class="btn btn-primary w-100"
                    disabled="@isCreating">
                @if (isCreating)
                {
                    <span class="spinner-border spinner-border-sm"></span>
                    <span> Indul...</span>
                }
                else
                {
                    <span>Új játék indítása</span>
                }
            </button>

            @if (!string.IsNullOrEmpty(error))
            {
                <div class="text-danger mt-2">@error</div>
            }
        </EditForm>
    </div>
</div>

@code {
    // 1) A form modellje
    private NewGameModel model = new();
    private bool isCreating;
    private string? error;

    // 2) A POST CreateGame metódus
    private async Task CreateGame()
    {
        isCreating = true;
        error = null;

        try
        {
            var client = HttpFactory.CreateClient("PokerClient");

            // Felépítjük a kérés body-ját:
            var request = new CreateGameRequest
                {
                    NumOfBots = model.NumBots,
                    PlayerName = model.PlayerName
                };

            // POST newgame
            var response = await client.PostAsJsonAsync("newgame", request);
            response.EnsureSuccessStatusCode();

            // A válaszban kapott Game objektum
            var game = await response.Content.ReadFromJsonAsync<Game>()
                       ?? throw new InvalidOperationException("Üres válasz a szerverről.");

            // Beállítjuk a GameState-ben
            GameState.UpdateGame(game);

            // Átirányítás a póker oldalra a game Id-val
            NavigationManager.NavigateTo($"/poker/game");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isCreating = false;
        }
    }

    public class NewGameModel
    {
        [Required]
        public string PlayerName { get; set; } = "Player";

        [Range(1, 10, ErrorMessage = "Legalább 1 bot kell.")]
        public int NumBots { get; set; } = 5;
    }
}
