@page "/recipes"
@rendermode InteractiveServer
@using System.Threading.Tasks
@using System.Collections.Generic
@using System.Net.Http
@using System.Net.Http.Json
@using Frontend.WebAssembly.Poker.Components.Layout
@* @layout SecondaryLayout *@


@inject IHttpClientFactory HttpFactory

<!-- Recept kereső oldal -->
<div class="container my-4">
    <!-- Felhasználói bemenetek kártya -->
    <div class="card p-4 mb-4 w-100 h-100">
        <!-- Recept elképzelés szöveges leírása -->
        <div class="form-group">
            <label for="recipeDescription">Recept elképzelés / leírás</label>
            <textarea id="recipeDescription" class="form-control" rows="3"
                      placeholder="Írd le, milyen ételhez szeretnél receptet (pl. 'magas fehérjetartalmú csirkés étel')..."
                      @bind="RecipeDescription"></textarea>
        </div>

        <!-- Hozzávalók bevitele -->
        <div class="form-group mt-3">
            <label for="ingredientInput">Hozzávalók, amik a birtokodban vannak</label>
            <div class="input-group">
                <input id="ingredientInput" type="text" class="form-control"
                       placeholder="Add meg a hozzávalót (pl. csirke, brokkoli, stb.)"
                       @bind="NewIngredient" />
                <button class="btn btn-outline-secondary" type="button" @onclick="() => AddIngredient()">Hozzáadás</button>
            </div>
        </div>

        <!-- Hozzávalók listázása -->
        @if (Ingredients.Count > 0)
        {
            <div class="mt-3">
                <h6>Hozzávalók listája:</h6>
                <ul class="list-group">
                    @foreach (var ingredient in Ingredients)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @ingredient
                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveIngredient(ingredient)">Törlés</button>
                        </li>
                    }
                </ul>
            </div>
        }

        <!-- Recept lekérés gomb -->
        <button class="btn btn-primary mt-4" @onclick="GetRecipes">Kérem a recepteket</button>
    </div>

    <!-- Recept ajánlások megjelenítése -->
    @if (Recipes != null && Recipes.Count > 0 && SelectedRecipe == null)
    {
        <div class="mb-4">
            <h4>Ajánlott receptek</h4>
            <div class="row">
                @foreach (var recipe in Recipes)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card h-100 w-100">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@recipe.Title</h5>
                                <p class="card-text flex-grow-1">@recipe.ShortDescription</p>
                                <button class="btn btn-info mt-2" @onclick="() => SelectRecipe(recipe)">Részletek</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Kiválasztott recept részletes megjelenítése -->
    @if (SelectedRecipe != null)
    {
        <div class="card p-4 w-100 h-100">
            <h4>@SelectedRecipe.Title</h4>
            <p>@SelectedRecipe.DetailedRecipe</p>
            <button class="btn btn-secondary" @onclick="CloseRecipeDetails">Vissza az ajánlásokhoz</button>
        </div>
    }
</div>

@code {
    // Felhasználó által megadott recept leírása
    private string RecipeDescription { get; set; } = string.Empty;

    // Új hozzávaló beviteléhez használt mező
    private string NewIngredient { get; set; } = string.Empty;

    // Hozzávalók listája, amiket a felhasználó hozzáadott
    private List<string> Ingredients { get; set; } = new List<string>();

    // Az AI által visszaadott recept ajánlások listája
    private List<RecipeSuggestion> Recipes { get; set; } = new List<RecipeSuggestion>();

    // A kiválasztott recept, mely részletesen kerül megjelenítésre
    private RecipeSuggestion SelectedRecipe { get; set; } = null;

    private HttpClient? _http;

    protected override async Task OnInitializedAsync()
    {
        _http = HttpFactory.CreateClient("RecipesClient");
    }

    /// <summary>
    /// Hozzáad egy új hozzávalót a listához, ha a mező nem üres.
    /// </summary>
    private void AddIngredient()
    {
        if (!string.IsNullOrWhiteSpace(NewIngredient))
        {
            Ingredients.Add(NewIngredient.Trim());
            NewIngredient = string.Empty;
        }
    }

    /// <summary>
    /// Eltávolítja a megadott hozzávalót a listából.
    /// </summary>
    /// <param name="ingredient">A törlendő hozzávaló</param>
    private void RemoveIngredient(string ingredient)
    {
        Ingredients.Remove(ingredient);
    }

    /// <summary>
    /// Lekéri a recept ajánlásokat a backend API-t használva.
    /// A felhasználó által megadott recept leírását és hozzávalóit elküldi az API végpontra, majd a kapott JSON választ deszerializálja.
    /// </summary>
    private async Task GetRecipes()
    {
        if (_http == null)
        {
            Console.WriteLine("HTTP kliens nem inicializálódott!");
            return;
        }

        // Az elküldendő adatok összeállítása.
        var recipeRequest = new RecipeRequest
            {
                Description = RecipeDescription,
                Ingredients = Ingredients
            };

        try
        {
            // Küldjük az adatszerkezetet a backend POST végpontra.
            var response = await _http.PostAsJsonAsync("generate", recipeRequest);
            if (response.IsSuccessStatusCode)
            {
                // A válasz JSON tartalmának beolvasása és deszerializálása.
                var result = await response.Content.ReadFromJsonAsync<List<RecipeSuggestion>>();
                if (result is not null)
                {
                    Recipes = result;
                    SelectedRecipe = null;
                }
            }
            else
            {
                Console.WriteLine($"Hiba történt: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Kivétel a recept lekérése során: " + ex.Message);
        }
    }

    /// <summary>
    /// Kiválasztja a felhasználó által választott receptet.
    /// Itt lehet később részletes adatlekérés a backendtől.
    /// </summary>
    /// <param name="recipe">A kiválasztott recept</param>
    private async Task SelectRecipe(RecipeSuggestion recipe)
    {
        SelectedRecipe = recipe;
        await Task.CompletedTask;
    }

    /// <summary>
    /// Visszavált a recept ajánlások listájára a részletes nézetből.
    /// </summary>
    private void CloseRecipeDetails()
    {
        SelectedRecipe = null;
    }

    /// <summary>
    /// A recept ajánlásokat reprezentáló modell.
    /// </summary>
    public class RecipeSuggestion
    {
        /// <summary>
        /// A recept címe.
        /// </summary>
        public string Title { get; set; }

        /// <summary>
        /// Rövid leírás a recept lényegéről.
        /// </summary>
        public string ShortDescription { get; set; }

        /// <summary>
        /// A recept részletes elkészítési módja.
        /// </summary>
        public string DetailedRecipe { get; set; }
    }

    /// <summary>
    /// A backend felé elküldendő recept kérés adatai.
    /// </summary>
    public class RecipeRequest
    {
        /// <summary>
        /// A felhasználó által megadott recept leírása.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// A rendelkezésre álló hozzávalók listája.
        /// </summary>
        public List<string> Ingredients { get; set; }
    }
}
