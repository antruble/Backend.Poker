// <auto-generated />
using System;
using Backend.Poker.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Poker.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250307100955_added")]
    partial class added
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Poker.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CurrentHandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentHandId")
                        .IsUnique()
                        .HasFilter("[CurrentHandId] IS NOT NULL");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Backend.Poker.Domain.Entities.Hand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FirstPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HandStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrentRoundFinished")
                        .HasColumnType("bit");

                    b.Property<Guid>("PivotPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Pot")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPlayerId");

                    b.ToTable("Hands");
                });

            modelBuilder.Entity("Backend.Poker.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BlindStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("Chips")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBot")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFolded")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerStatus")
                        .HasColumnType("int");

                    b.Property<int>("Seat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Backend.Poker.Domain.Entities.Winner", b =>
                {
                    b.Property<Guid>("HandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Pot")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("HandId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Winner");
                });

            modelBuilder.Entity("Backend.Poker.Domain.Entities.Game", b =>
                {
                    b.HasOne("Backend.Poker.Domain.Entities.Hand", "CurrentHand")
                        .WithOne()
                        .HasForeignKey("Backend.Poker.Domain.Entities.Game", "CurrentHandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CurrentHand");
                });

            modelBuilder.Entity("Backend.Poker.Domain.Entities.Hand", b =>
                {
                    b.HasOne("Backend.Poker.Domain.Entities.Player", "CurrentPlayer")
                        .WithMany()
                        .HasForeignKey("CurrentPlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsMany("Backend.Poker.Domain.ValueObjects.Card", "CommunityCards", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("HandId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Rank")
                                .HasColumnType("int");

                            b1.Property<int>("Suit")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("HandId");

                            b1.ToTable("CommunityCards", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("HandId");
                        });

                    b.Navigation("CommunityCards");

                    b.Navigation("CurrentPlayer");
                });

            modelBuilder.Entity("Backend.Poker.Domain.Entities.Player", b =>
                {
                    b.HasOne("Backend.Poker.Domain.Entities.Game", null)
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsMany("Backend.Poker.Domain.ValueObjects.Card", "HoleCards", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PlayerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Rank")
                                .HasColumnType("int");

                            b1.Property<int>("Suit")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("PlayerId");

                            b1.ToTable("HoleCards", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PlayerId");
                        });

                    b.OwnsMany("Backend.Poker.Domain.Entities.PlayerAction", "ActionsHistory", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("ActionType")
                                .HasColumnType("int");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<Guid>("PlayerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("datetime2");

                            b1.HasKey("Id");

                            b1.HasIndex("PlayerId");

                            b1.ToTable("PlayerActions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PlayerId");
                        });

                    b.Navigation("ActionsHistory");

                    b.Navigation("HoleCards");
                });

            modelBuilder.Entity("Backend.Poker.Domain.Entities.Winner", b =>
                {
                    b.HasOne("Backend.Poker.Domain.Entities.Hand", null)
                        .WithMany("Winners")
                        .HasForeignKey("HandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Poker.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Backend.Poker.Domain.Entities.Game", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Backend.Poker.Domain.Entities.Hand", b =>
                {
                    b.Navigation("Winners");
                });
#pragma warning restore 612, 618
        }
    }
}
